/*
Purpose: Welcome to this section of my portfolio! Here, you will find a curated collection of SQL interview questions that I have thoughtfully answered. 
Each solution is accompanied by detailed comments and explanations to ensure clarity and to demonstrate my thought process.

The goal of this repository is not only to showcase my proficiency in SQL but also to serve as a resource for others preparing for interviews or
looking to strengthen their understanding of SQL concepts.
The questions cover a range of topics, from foundational queries to more advanced techniques, highlighting practical applications
and best practices in database management and analysis.

Feel free to explore, learn, and reach out if you have any questions or would like to discuss these examples further.
Let's grow together in mastering the art of data querying!
here you will find some easy SQL interview questions that I answered with comments to explain
Author: Kirolos Girgis
*/


-- Write a query to select all records from a table called Customers.

SELECT * 
FROM Customers;

-- Write a query to fetch all orders from the Orders table where the OrderAmount is greater than 500.

SELECT * 
FROM Orders
WHERE OrderAmount > 500;

-- Write a query to fetch customer names and sort them alphabetically from the Customers table.

SELECT CustomerName 
FROM Customers
ORDER BY CustomerName ASC;

-- Write a query to fetch only the FirstName and LastName columns from the Employees table.

SELECT FirstName, 
       LastName 
FROM Employees;

-- Write a query to find unique cities from the Customers table.

SELECT DISTINCT City 
FROM Customers;

-- Write a query to count the total number of customers in the Customers table.

SELECT COUNT(*) AS TotalCustomers 
FROM Customers;

-- Write a query to calculate the total sales from the Sales table.

SELECT SUM(SalesAmount) AS TotalSales 
FROM Sales;

-- Write a query to group employees by their Department and count how many employees work in each department.

SELECT Department, 
       COUNT(*) AS EmployeeCount
FROM   Employees
GROUP BY Department;

-- Write a query to calculate the average salary of employees from the Employees table.

SELECT AVG(Salary) AS AverageSalary 
FROM Employees;

-- Write a query to find the highest order amount from the Orders table.

SELECT MAX(OrderAmount) AS HighestOrder
FROM Orders;

-- Write a query to fetch customer names and their respective order amounts by joining the Customers and Orders tables.

SELECT Customers.CustomerName,
       Orders.OrderAmount
FROM Customers
INNER JOIN Orders
ON Customers.CustomerID = Orders.CustomerID;

-- Write a query to fetch all customers and their order details, even if the customer has not placed an order.

SELECT Customers.CustomerName,
       Orders.OrderAmount
FROM Customers
LEFT JOIN Orders
ON Customers.CustomerID = Orders.CustomerID;

-- Write a query to fetch all orders and the customer details for those orders, even if the customer information is missing.

SELECT Orders.OrderID, 
       Customers.CustomerName
FROM Orders
RIGHT JOIN Customers
ON Customers.CustomerID = Orders.CustomerID;

-- Write a query to generate all possible combinations of rows between the Products and Categories tables.

SELECT Products.ProductName,
       Categories.CategoryName
FROM Products
CROSS JOIN Categories;

-- Write a query to fetch all employees whose DepartmentID is in (1, 2, 3).

SELECT EmployeeName 
FROM Employees
WHERE DepartmentID IN (1, 2, 3);

-- Write a query to fetch orders where the OrderDate is between '2023-01-01' and '2023-12-31'.

SELECT * 
FROM Orders
WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31';

-- Write a query to find employees who earn more than the average salary in the Employees table.

SELECT EmployeeName 
FROM Employees
WHERE Salary > (SELECT AVG(Salary) FROM Employees);

-- Write a query to check if there are any orders from a specific customer with CustomerID = 10.

SELECT * 
FROM Orders
WHERE EXISTS (
    SELECT 1 
    FROM Customers 
    WHERE Customers.CustomerID = Orders.CustomerID AND Customers.CustomerID = 10);

-- Write a query to insert a new customer into the Customers table with Name = 'John Doe' and City = 'Seattle'.

INSERT INTO Customers (CustomerName, City)
VALUES ('John Doe', 'Seattle');

-- Write a query to update the OrderStatus to 'Shipped' for orders where OrderID = 100.

UPDATE Orders
SET OrderStatus = 'Shipped'
WHERE OrderID = 100;

-- Write a query to delete all records from the Customers table where the City is NULL.

DELETE FROM Customers
WHERE City IS NULL;

-- Write a query to create a table called Products with columns: ProductID, ProductName, Price.

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DECIMAL(10, 2));

-- Write a query to delete the OldProducts table from the database.

DROP TABLE OldProducts;
